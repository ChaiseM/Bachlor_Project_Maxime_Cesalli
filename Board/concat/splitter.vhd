-- VHDL Entity Board.FPGA_splitter.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 09:15:21 23.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY FPGA_splitter IS
    GENERIC( 
        buttonNb : positive := 4;
        ledNb    : positive := 8
    );
    PORT( 
        CLK_In  : IN     std_uLogic;
        Data_In : IN     std_uLogic;
        LR_In   : IN     std_uLogic;
        clock   : IN     std_ulogic;
        reset_n : IN     std_ulogic;
        CLK_O   : OUT    std_uLogic;
        Data_O  : OUT    std_uLogic;
        LR_O    : OUT    std_ulogic
    );

-- Declarations

END FPGA_splitter ;





-- VHDL Entity Splitter.leftRightSplitter.symbol
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 15:45:18 16/05/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY leftRightSplitter IS
    GENERIC( 
        clockFrequency : real     := 66.0E6;
        signalBitNb    : positive := 24;
        signalOBitNb   : positive := 32
    );
    PORT( 
        CLK_I  : IN     std_uLogic;
        Data_I : IN     std_uLogic;
        LR_I   : IN     std_uLogic;
        clock  : IN     std_ulogic;
        reset  : IN     std_ulogic;
        CLK_O  : OUT    std_uLogic;
        Data_O : OUT    std_uLogic;
        LR_O   : OUT    std_ulogic
    );

-- Declarations

END leftRightSplitter ;





LIBRARY ieee;
USE ieee.std_logic_1164.all;

PACKAGE gates IS

--  constant gateDelay: time := 1 ns;
  constant gateDelay: time := 0.1 ns;

END gates;




--------------------------------------------------------------------------------
-- Copyright 2012 HES-SO Valais Wallis (www.hevs.ch)
--------------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program IS distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License along with
-- this program. If not, see <http://www.gnu.org/licenses/>
-- -----------------------------------------------------------------------------
-- Common Lib
--
-- -----------------------------------------------------------------------------
--  Authors:
--    cof: [François Corthay](francois.corthay@hevs.ch)
--    guo: [Oliver A. Gubler](oliver.gubler@hevs.ch)
-- -----------------------------------------------------------------------------
-- Changelog:
--   2016-06 : guo
--     added function sel
--   2015-06 : guo
--     added counterBitNb
--     added documentation
-- -----------------------------------------------------------------------------
library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.numeric_std.all;

PACKAGE CommonLib IS

  ------------------------------------------------------------------------------
  -- Returns the number of bits needed to represent the given val
  -- Examples:
  --   requiredBitNb(1) = 1   (1)
  --   requiredBitNb(2) = 2   (10)
  --   requiredBitNb(3) = 2   (11)
  function requiredBitNb(val : integer) return integer;

  ------------------------------------------------------------------------------
  -- Returns the number of bits needed to count val times (0 to val-1)
  -- Examples:
  --   counterBitNb(1) = 1    (0)
  --   counterBitNb(2) = 1    (0->1)
  --   counterBitNb(3) = 2    (0->1->10)
  function counterBitNb(val : integer) return integer;

  ------------------------------------------------------------------------------
  -- Functions to return one or the other input based on a boolean.
  -- Can be used to build conditional constants.
  -- Example:
  --   constant bonjour_c : string := sel(ptpRole = master, "fpga20", "fpga02");
  function sel(Cond : BOOLEAN; If_True, If_False : integer)
                                            return integer;
  function sel(Cond : BOOLEAN; If_True, If_False : string)
                                            return string;
  function sel(Cond : BOOLEAN; If_True, If_False : std_ulogic_vector)
                                            return std_ulogic_vector;
  function sel(Cond : BOOLEAN; If_True, If_False : unsigned)
                                            return unsigned;
  function sel(Cond : BOOLEAN; If_True, If_False : signed)
                                            return signed;

END CommonLib;




--------------------------------------------------------------------------------
-- Copyright 2012 HES-SO Valais Wallis (www.hevs.ch)
--------------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program IS distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License along with
-- this program. If not, see <http://www.gnu.org/licenses/>
-- -----------------------------------------------------------------------------
-- Often used functions
--
-- -----------------------------------------------------------------------------
--  Authors:
--    cof: [François Corthay](francois.corthay@hevs.ch)
--    guo: [Oliver A. Gubler](oliver.gubler@hevs.ch)
-- -----------------------------------------------------------------------------
-- Changelog:
--   2016-06 : guo
--     added function sel
--   2015-06 : guo
--     added counterBitNb
-- -----------------------------------------------------------------------------
PACKAGE BODY CommonLib IS

  function requiredBitNb (val : integer) return integer is
    variable powerOfTwo, bitNb : integer;
  begin
    powerOfTwo := 1;
    bitNb := 0;
    while powerOfTwo <= val loop
      powerOfTwo := 2 * powerOfTwo;
      bitNb := bitNb + 1;
    end loop;
    return bitNb;
  end requiredBitNb;

  function counterBitNb (val : integer) return integer is
    variable powerOfTwo, bitNb : integer;
  begin
    powerOfTwo := 1;
    bitNb := 0;
    while powerOfTwo < val loop
      powerOfTwo := 2 * powerOfTwo;
      bitNb := bitNb + 1;
    end loop;
    return bitNb;
  end counterBitNb;

  function sel(Cond : BOOLEAN; If_True, If_False : integer)
                                            return integer is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : string)
                                            return string is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : std_ulogic_vector)
                                            return std_ulogic_vector is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : unsigned)
                                            return unsigned is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : signed)
                                            return signed is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

END CommonLib;




--
-- VHDL Architecture Splitter.iisDecoder.iis
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 13:33:57 16/05/2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY iisDecoder IS

	generic(
		signalBitNb : positive := 24
	);

	port(
		reset		: in std_ulogic;
		clock  		: in std_ulogic;
		LRCK 		: in std_ulogic;
		SCK			: in std_ulogic;
		DOUT  		: in std_ulogic;
		dataValid 	: out std_ulogic;
		audioLeft 	: out signed(signalBitNb-1 downto 0);
		audioRight 	: out signed(signalBitNb-1 downto 0)
	);


END ENTITY iisDecoder ;

--
ARCHITECTURE iis OF iisDecoder IS

    signal sck_delayed : std_ulogic;
	signal lrck_delayed : std_ulogic;
	signal sck_rising : std_ulogic;
	signal lrck_changed : std_ulogic;
    
	signal bitCounter : unsigned(4 downto 0);  -- count to 32

	signal audioLeftReg  : signed(audioLeft'range);
	signal audioRightReg : signed(audioRight'range);

begin
	delayClocks: process(reset, clock)
	begin
		if reset = '1' then
			sck_delayed <= '0';
			lrck_delayed <= '0';
		elsif rising_edge(clock) then
			sck_delayed <= SCK;
			lrck_delayed <= LRCK;
		end if;
	end process delayClocks;

	sck_rising <= '1' when (SCK = '1') and (sck_delayed = '0') else '0';
	lrck_changed <= '1' when lrck_delayed /= LRCK else '0';

	countBits: process(reset, clock)
	begin
		if reset = '1' then
			bitCounter <= (others => '0');
		elsif rising_edge(clock) then
        
        
			if lrck_changed = '1' then
				bitCounter <= (others => '0');
			elsif sck_rising = '1' then 
				bitCounter <= bitCounter + 1;
			end if;
		end if;
	end process countBits;

	shiftRegisters: process(reset, clock)
	begin
		if reset = '1' then
			audioLeftReg  <= (others => '0');
			audioRightReg <= (others => '0');
		elsif rising_edge(clock) then
			if sck_rising = '1' then
				if bitCounter < audioLeftReg'length+1 and bitCounter > 0 then
					if LRCK = '0' then    -- odd channel
						audioLeftReg <= shift_left(audioLeftReg, 1);
						audioLeftReg(0) <= DOUT;
					else -- even channel
						audioRightReg <= shift_left(audioRightReg, 1);
						audioRightReg(0) <= DOUT;
					end if;
				end if;
			end if;
		end if;
	end process shiftRegisters;

    audioLeft  <= audioLeftReg;
    audioRight <= audioRightReg;

    dataValid <= '1' when (LRCK = '1') and (bitCounter = audioLeftReg'length+1)
    else '0';

END ARCHITECTURE iis;





--
-- VHDL Architecture Splitter.iisResizer.iis
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 13:34:14 16/05/2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY iisResizer IS
    GENERIC( 
        signalIBitNb : positive := 24;
        signalOBitNb : positive := 32
    );
    PORT( 
        dataValidI  : IN     std_ulogic;
        audioLeftI  : IN     signed (signalIBitNb-1 DOWNTO 0);
        audioRightI : IN     signed (signalIBitNb-1 DOWNTO 0);
        ShiftData   : IN     std_ulogic;
        audioLeftO  : OUT    signed (signalOBitNb-1 DOWNTO 0);
        audioRightO : OUT    signed (signalOBitNb-1 DOWNTO 0);
        clock       : IN     std_ulogic;
        reset       : IN     std_ulogic
    );

-- Declarations

END iisResizer ;

--
ARCHITECTURE iis OF iisResizer IS

    signal tempR : signed(signalOBitNb-1 DOWNTO 0);
    signal tempL : signed(signalOBitNb-1 DOWNTO 0);
    signal cnt: unsigned(1 downto 0); 

BEGIN

    FlipFlopAndResize: process(reset, clock)
	begin
		if reset = '1' then
			tempR <= (others => '0');
            cnt <= (others => '0');
			tempL <= (others => '0');
            audioLeftO  <= (others => '0');
            audioRightO <= (others => '0');
		elsif rising_edge(clock) then
            if dataValidI = '1' then
                cnt <= to_unsigned(2,cnt'length);
                tempR <= shift_left(resize(audioRightI,tempR'length),(signalOBitNb-signalIBitNb));
                tempL <= shift_left(resize(audioLeftI,tempL'length),(signalOBitNb-signalIBitNb));
            end if;
            if ShiftData ='1' then
                    audioRightO <= tempR;
                    audioLeftO <= tempL;
            end if;
		end if;
	end process FlipFlopAndResize;
    


END ARCHITECTURE iis;





--
-- VHDL Architecture Splitter.iisEncoder.iis
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 13:34:30 16/05/2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;  
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY iisEncoder IS
    GENERIC( 
		signalBitNb : 		positive := 32;
		I2SFrequency : 		positive := 2048000;
		clockFrequency : 	positive := 66000000
    );
    PORT( 
        reset      : IN     std_ulogic;
        clock      : IN     std_ulogic;
        audioLeft  : IN     signed (signalBitNb-1 DOWNTO 0);
        audioRight : IN     signed (signalBitNb-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic;
        SCK        : OUT    std_ulogic;
        DOUT       : OUT    std_ulogic;
        ShiftData  : OUT    std_ulogic;
		CLKI2s 	   : IN     std_uLogic
      
    );

-- Declarations

END iisEncoder ;

--
ARCHITECTURE iis OF iisEncoder IS
   
    constant frameLength : positive := signalBitNb;
    constant frameCounterBitNb : positive := requiredBitNb(frameLength-1);
	constant nbrClk : positive := clockFrequency/(2*I2SFrequency) ;
    signal pastI2SClock : std_uLogic;
    signal LR : std_uLogic;
	
	signal tempCnt : unsigned(10 downto 0);
    signal frameCounter : unsigned(frameCounterBitNb-1 downto 0);
    signal leftShiftRegister : signed(audioLeft'range);
    signal rightShiftRegister : signed(audioRight'range);
     

begin

    FlipFlopAndResize: process(reset, clock)
	begin
		if reset = '1' then
			frameCounter <= (others => '0');
            leftShiftRegister <= (others => '0');
            rightShiftRegister <= (others => '0');
            LR <= '0';
            pastI2SClock <= '0';
			tempCnt <= (others => '0');
           -- switch <= '0';
		elsif rising_edge(clock) then
		
           
            if CLKI2s = '1' and pastI2SClock = '0' then 
               
                pastI2SClock <= '1'; 
                
  
            elsif CLKI2s = '0' and pastI2SClock = '1' then
                pastI2SClock <= '0';
				ShiftData <= '0';
                frameCounter <= frameCounter+1;
				if frameCounter + 1 = 0 then
                    ShiftData <= '1';
					LR <=  not LR; 
                end if;
            end if ; 

            LRCK <= LR;
            SCK <= CLKI2s;
            if LR = '1' then 
				DOUT <= leftShiftRegister(signalBitNb-1); 
                leftShiftRegister <= shift_left(audioLeft,to_integer(frameCounter));
            else 
				DOUT <= rightShiftRegister(signalBitNb-1); 
                rightShiftRegister <= shift_left(audioRight,to_integer(frameCounter));
                
            end if;
           
		end if;
	end process FlipFlopAndResize;
        
END ARCHITECTURE iis;




--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 10:45:37 23.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

-- LIBRARY Splitter;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations

    -- Internal signal declarations
    SIGNAL ShiftData   : std_ulogic;
    SIGNAL audioLeft   : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL audioLeftO  : signed(signalOBitNb-1 DOWNTO 0);
    SIGNAL audioRight  : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL audioRightO : signed(signalOBitNb-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;


    -- Component Declarations
    COMPONENT iisDecoder
    GENERIC (
        signalBitNb : positive := 24
    );
    PORT (
        DOUT       : IN     std_ulogic;
        LRCK       : IN     std_ulogic;
        SCK        : IN     std_ulogic;
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic;
        audioLeft  : OUT    signed (signalBitNb-1 DOWNTO 0);
        audioRight : OUT    signed (signalBitNb-1 DOWNTO 0);
        dataValid  : OUT    std_ulogic
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        signalBitNb    : positive := 32;
        I2SFrequency   : positive := 2048000;
        clockFrequency : positive := 66000000
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (signalBitNb-1 DOWNTO 0);
        audioRight : IN     signed (signalBitNb-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        ShiftData  : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic 
    );
    END COMPONENT;
    COMPONENT iisResizer
    GENERIC (
        signalIBitNb : positive := 24;
        signalOBitNb : positive := 32
    );
    PORT (
        dataValidI  : IN     std_ulogic ;
        audioLeftI  : IN     signed (signalIBitNb-1 DOWNTO 0);
        audioRightI : IN     signed (signalIBitNb-1 DOWNTO 0);
        ShiftData   : IN     std_ulogic ;
        audioLeftO  : OUT    signed (signalOBitNb-1 DOWNTO 0);
        audioRightO : OUT    signed (signalOBitNb-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        reset       : IN     std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
--     FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
--     FOR ALL : iisResizer USE ENTITY Splitter.iisResizer;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I0 : iisDecoder
        GENERIC MAP (
            signalBitNb => 24
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight
        );
    I2 : iisEncoder
        GENERIC MAP (
            signalBitNb    => 32,
            I2SFrequency   => 2000000,
            clockFrequency => 66000000
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioLeftO,
            audioRight => audioRightO,
            LRCK       => LR_O,
            SCK        => CLK_O,
            DOUT       => Data_O,
            ShiftData  => ShiftData,
            CLKI2s     => CLK_I
        );
    I1 : iisResizer
        GENERIC MAP (
            signalIBitNb => 24,
            signalOBitNb => 32
        )
        PORT MAP (
            dataValidI  => dataValid,
            audioLeftI  => audioLeft,
            audioRightI => audioRight,
            ShiftData   => ShiftData,
            audioLeftO  => audioLeftO,
            audioRightO => audioRightO,
            clock       => clock,
            reset       => reset
        );

END visitorsVersion;




-- VHDL Entity gates.inverter.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:35:14 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY inverter IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        in1  : IN     std_uLogic;
        out1 : OUT    std_uLogic
    );

-- Declarations

END inverter ;





ARCHITECTURE sim OF inverter IS
BEGIN
  out1 <= NOT in1 after delay;
END sim;




-- VHDL Entity gates.logic1.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:35:13 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY logic1 IS
    PORT( 
        logic_1 : OUT    std_uLogic
    );

-- Declarations

END logic1 ;





ARCHITECTURE sim OF logic1 IS
BEGIN
  logic_1 <= '1';
END sim;




-- VHDL Entity sequential.DFF.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:46:19 08/28/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY DFF IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        CLK : IN     std_uLogic;
        CLR : IN     std_uLogic;
        D   : IN     std_uLogic;
        Q   : OUT    std_uLogic
    );

-- Declarations

END DFF ;





ARCHITECTURE sim OF DFF IS
BEGIN

  process(clk, clr)
  begin
    if clr = '1' then
      q <= '0' after delay;
    elsif rising_edge(clk) then
      q <= d after delay;
    end if;
  end process;

END sim;




--
-- VHDL Architecture Board.FPGA_splitter.struct
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 09:15:21 23.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

-- LIBRARY sequential;
-- LIBRARY Splitter;

ARCHITECTURE struct OF FPGA_splitter IS

    -- Architecture declarations
    constant clockFrequency: real := 66.0E6;
    constant rs232BaudRate: real := 115.2E3;
    constant pwmFrequency: real := 100.0E3;
    constant mainsFrequency: real := 50.0;
    constant debounceCounterBitNb: positive := requiredBitNb(integer(clockFrequency/100.0));
    constant spikeFilterCounterBitNb: positive := requiredBitNb(10);
    constant buttonsRepeatFrequency: real := 100.0;
    constant controlAmplitudeBitNb: natural := 10;
    constant proportionalShift: integer := -14;
    constant integratorShift: integer := -12;
    constant testLineNb: positive := 16;

    -- Internal signal declarations
    SIGNAL CLK_I        : std_uLogic;
    SIGNAL Data_I       : std_uLogic;
    SIGNAL LR_I         : std_uLogic;
    SIGNAL reset        : std_ulogic;
    SIGNAL reset1       : std_ulogic;
    SIGNAL resetSynch   : std_ulogic;
    SIGNAL resetSynch_n : std_ulogic;


    -- Component Declarations
    COMPONENT inverter
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT logic1
    PORT (
        logic_1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT DFF
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        D   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT leftRightSplitter
    GENERIC (
        clockFrequency : real     := 66.0E6;
        signalBitNb    : positive := 24;
        signalOBitNb   : positive := 32
    );
    PORT (
        CLK_I  : IN     std_uLogic ;
        Data_I : IN     std_uLogic ;
        LR_I   : IN     std_uLogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        CLK_O  : OUT    std_uLogic ;
        Data_O : OUT    std_uLogic ;
        LR_O   : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : DFF USE ENTITY sequential.DFF;
--     FOR ALL : inverter USE ENTITY gates.inverter;
--     FOR ALL : leftRightSplitter USE ENTITY Splitter.leftRightSplitter;
--     FOR ALL : logic1 USE ENTITY gates.logic1;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I1 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => reset_n,
            out1 => reset
        );
    I7 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => resetSynch_n,
            out1 => resetSynch
        );
    I28 : logic1
        PORT MAP (
            logic_1 => reset1
        );
    I_rst : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => reset,
            D   => reset1,
            Q   => resetSynch_n
        );
    I_rst1 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => LR_In,
            Q   => LR_I
        );
    I_rst2 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => Data_In,
            Q   => Data_I
        );
    I_rst3 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => CLK_In,
            Q   => CLK_I
        );
    I0 : leftRightSplitter
        GENERIC MAP (
            clockFrequency => 66.0E6,
            signalBitNb    => 24,
            signalOBitNb   => 32
        )
        PORT MAP (
            CLK_I  => CLK_I,
            Data_I => Data_I,
            LR_I   => LR_I,
            clock  => clock,
            reset  => resetSynch,
            CLK_O  => CLK_O,
            Data_O => Data_O,
            LR_O   => LR_O
        );

END struct;




