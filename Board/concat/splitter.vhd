-- VHDL Entity Board.FPGA_splitter.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 11:51:31 30.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY FPGA_splitter IS
    GENERIC( 
        buttonNb : positive := 4;
        ledNb    : positive := 8
    );
    PORT( 
        CLK_In  : IN     std_uLogic;
        Data_In : IN     std_uLogic;
        LR_In   : IN     std_uLogic;
        clock   : IN     std_ulogic;
        reset_n : IN     std_ulogic;
        CLK_O   : OUT    std_uLogic;
        Data_O  : OUT    std_uLogic;
        LR_O    : OUT    std_ulogic
    );

-- Declarations

END FPGA_splitter ;





-- VHDL Entity Splitter.leftRightSplitter.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 10:41:50 26.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY leftRightSplitter IS
    GENERIC( 
        signalBitNb  : positive := 24;
        signalOBitNb : positive := 32
    );
    PORT( 
        CLK_I  : IN     std_uLogic;
        Data_I : IN     std_uLogic;
        LR_I   : IN     std_uLogic;
        clock  : IN     std_ulogic;
        reset  : IN     std_ulogic;
        CLK_O  : OUT    std_uLogic;
        Data_O : OUT    std_uLogic;
        LR_O   : OUT    std_ulogic
    );

-- Declarations

END leftRightSplitter ;





LIBRARY ieee;
USE ieee.std_logic_1164.all;

PACKAGE gates IS

--  constant gateDelay: time := 1 ns;
  constant gateDelay: time := 0.1 ns;

END gates;




--------------------------------------------------------------------------------
-- Copyright 2012 HES-SO Valais Wallis (www.hevs.ch)
--------------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program IS distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License along with
-- this program. If not, see <http://www.gnu.org/licenses/>
-- -----------------------------------------------------------------------------
-- Common Lib
--
-- -----------------------------------------------------------------------------
--  Authors:
--    cof: [François Corthay](francois.corthay@hevs.ch)
--    guo: [Oliver A. Gubler](oliver.gubler@hevs.ch)
-- -----------------------------------------------------------------------------
-- Changelog:
--   2016-06 : guo
--     added function sel
--   2015-06 : guo
--     added counterBitNb
--     added documentation
-- -----------------------------------------------------------------------------
library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.numeric_std.all;

PACKAGE CommonLib IS

  ------------------------------------------------------------------------------
  -- Returns the number of bits needed to represent the given val
  -- Examples:
  --   requiredBitNb(1) = 1   (1)
  --   requiredBitNb(2) = 2   (10)
  --   requiredBitNb(3) = 2   (11)
  function requiredBitNb(val : integer) return integer;

  ------------------------------------------------------------------------------
  -- Returns the number of bits needed to count val times (0 to val-1)
  -- Examples:
  --   counterBitNb(1) = 1    (0)
  --   counterBitNb(2) = 1    (0->1)
  --   counterBitNb(3) = 2    (0->1->10)
  function counterBitNb(val : integer) return integer;

  ------------------------------------------------------------------------------
  -- Functions to return one or the other input based on a boolean.
  -- Can be used to build conditional constants.
  -- Example:
  --   constant bonjour_c : string := sel(ptpRole = master, "fpga20", "fpga02");
  function sel(Cond : BOOLEAN; If_True, If_False : integer)
                                            return integer;
  function sel(Cond : BOOLEAN; If_True, If_False : string)
                                            return string;
  function sel(Cond : BOOLEAN; If_True, If_False : std_ulogic_vector)
                                            return std_ulogic_vector;
  function sel(Cond : BOOLEAN; If_True, If_False : unsigned)
                                            return unsigned;
  function sel(Cond : BOOLEAN; If_True, If_False : signed)
                                            return signed;

END CommonLib;




--------------------------------------------------------------------------------
-- Copyright 2012 HES-SO Valais Wallis (www.hevs.ch)
--------------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program IS distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License along with
-- this program. If not, see <http://www.gnu.org/licenses/>
-- -----------------------------------------------------------------------------
-- Often used functions
--
-- -----------------------------------------------------------------------------
--  Authors:
--    cof: [François Corthay](francois.corthay@hevs.ch)
--    guo: [Oliver A. Gubler](oliver.gubler@hevs.ch)
-- -----------------------------------------------------------------------------
-- Changelog:
--   2016-06 : guo
--     added function sel
--   2015-06 : guo
--     added counterBitNb
-- -----------------------------------------------------------------------------
PACKAGE BODY CommonLib IS

  function requiredBitNb (val : integer) return integer is
    variable powerOfTwo, bitNb : integer;
  begin
    powerOfTwo := 1;
    bitNb := 0;
    while powerOfTwo <= val loop
      powerOfTwo := 2 * powerOfTwo;
      bitNb := bitNb + 1;
    end loop;
    return bitNb;
  end requiredBitNb;

  function counterBitNb (val : integer) return integer is
    variable powerOfTwo, bitNb : integer;
  begin
    powerOfTwo := 1;
    bitNb := 0;
    while powerOfTwo < val loop
      powerOfTwo := 2 * powerOfTwo;
      bitNb := bitNb + 1;
    end loop;
    return bitNb;
  end counterBitNb;

  function sel(Cond : BOOLEAN; If_True, If_False : integer)
                                            return integer is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : string)
                                            return string is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : std_ulogic_vector)
                                            return std_ulogic_vector is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : unsigned)
                                            return unsigned is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

  function sel(Cond : BOOLEAN; If_True, If_False : signed)
                                            return signed is
  begin
    if (Cond = TRUE) then
      return (If_True);
    else
      return (If_False);
    end if;
  end function sel;

END CommonLib;




-- VHDL Entity Splitter.iisDecoder.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 10:58:43 26.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY iisDecoder IS
    GENERIC( 
        DATA_IN_WIDTH : positive
    );
    PORT( 
        reset      : IN     std_ulogic;
        clock      : IN     std_ulogic;
        LRCK       : IN     std_ulogic;
        SCK        : IN     std_ulogic;
        DOUT       : IN     std_ulogic;
        dataValid  : OUT    std_ulogic;
        audioLeft  : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0)
    );

-- Declarations

END iisDecoder ;





--
-- VHDL Architecture Splitter.iisDecoder.iis
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 13:33:57 16/05/2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

--
ARCHITECTURE iis OF iisDecoder IS

    signal sck_delayed : std_ulogic;
	signal lrck_delayed : std_ulogic;
	signal sck_rising : std_ulogic;
	signal lrck_changed : std_ulogic;
    signal old_dataValid : std_ulogic;
    signal s_dataValid : std_ulogic;
    
    
	signal bitCounter : unsigned(4 downto 0);  -- count to 32

	signal audioLeftReg  : signed(audioLeft'range);
	signal audioRightReg : signed(audioRight'range);

begin
	delayClocks: process(reset, clock)
	begin
		if reset = '1' then
            
			sck_delayed <= '0';
			lrck_delayed <= '0';
		elsif rising_edge(clock) then
			sck_delayed <= SCK;
			lrck_delayed <= LRCK;
		end if;
	end process delayClocks;

	sck_rising <= '1' when (SCK = '1') and (sck_delayed = '0') else '0';
	lrck_changed <= '1' when lrck_delayed /= LRCK else '0';
    s_dataValid  <= lrck_changed;
    
	countBits: process(reset, clock)
	begin
		if reset = '1' then
			bitCounter <= (others => '0');
		elsif rising_edge(clock) then
        
        
			if lrck_changed = '1' then
				bitCounter <= (others => '0');
			elsif sck_rising = '1' then 
				bitCounter <= bitCounter + 1;
			end if;
		end if;
	end process countBits;

	shiftRegisters: process(reset, clock)
	begin
		if reset = '1' then
            old_dataValid <= '0';
			audioLeftReg  <= (others => '0');
			audioRightReg <= (others => '0');
		elsif rising_edge(clock) then
			if sck_rising = '1' then
				if bitCounter < audioLeftReg'length then
                   
                    
					if LRCK = '0' then    -- odd channel
                        audioLeftReg  <= (others => '0');
						audioLeftReg <= shift_left(audioLeftReg, 1);
						audioLeftReg(0) <= DOUT;
					else -- even channel
                        audioRightReg <= (others => '0');
						audioRightReg <= shift_left(audioRightReg, 1);
						audioRightReg(0) <= DOUT;
					end if;
				end if;
			end if;
            
            if s_dataValid = '1' and old_dataValid = '0' then 
                old_dataValid <= '1';
            elsif s_dataValid = '0' and old_dataValid = '1' then 
                old_dataValid <= '0';
            end if ;
            
		end if;
	end process shiftRegisters;

    audioLeft  <= audioLeftReg;
    audioRight <= audioRightReg;

    --s_dataValid  <= '1' when (LRCK = '1') and (bitCounter = audioLeftReg'length+1)
    --else '0';
    
    dataValid <= '1' when s_dataValid = '1' and LRCK = '1'
    else '0';
    
    

END ARCHITECTURE iis;




-- VHDL Entity Splitter_test.bascule.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 08:44:01 02.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY bascule IS
    GENERIC( 
        DATA_IN_WIDTH : positive
    );
    PORT( 
        audio_L_in  : IN     signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_IN_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic;
        dataVAlid   : IN     std_ulogic;
        reset       : IN     std_ulogic;
        audio_L_out : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0)
    );

-- Declarations

END bascule ;





--
-- VHDL Architecture Splitter_test.bascule.test_lowpas_i2s
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 15:08:13 30.05.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE test_lowpas_i2s OF bascule IS

 

BEGIN

    FlipFlopAndResize: process(reset, clock)
	begin
		if reset = '1' then
			audio_R_out <= (others => '0');
            audio_L_out <= (others => '0');
		elsif rising_edge(clock) then
            if dataValid = '1' then
                 audio_R_out <= audio_R_in;
                 audio_L_out <= audio_L_in;
            end if;
		end if;
	end process FlipFlopAndResize;



END ARCHITECTURE test_lowpas_i2s;





-- VHDL Entity Splitter.iisEncoder.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 08:39:17 02.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;  
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY iisEncoder IS
    GENERIC( 
        DATA_WIDTH : positive
    );
    PORT( 
        reset      : IN     std_ulogic;
        clock      : IN     std_ulogic;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic;
        SCK        : OUT    std_ulogic;
        DOUT       : OUT    std_ulogic;
        CLKI2s     : IN     std_uLogic;
        LRCK1      : IN     std_uLogic
    );

-- Declarations

END iisEncoder ;





--
-- VHDL Architecture Splitter.iisEncoder.inputLRCK
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 08:46:24 02.06.2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;  
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;
  
ARCHITECTURE inputLRCK OF iisEncoder IS
    constant frameLength : positive := audioLeft'length;
    constant frameCounterBitNb : positive := requiredBitNb(frameLength-1);
    signal pastI2SClock : std_uLogic;
     signal pastLRCK : std_uLogic;
    signal frameCounter : unsigned(frameCounterBitNb-1 downto 0);
    signal leftShiftRegister : signed(audioLeft'range);
    signal rightShiftRegister : signed(audioRight'range);
     

begin

    FlipFlopAndResize: process(reset, clock)
	begin
		if reset = '1' then
			frameCounter <= (others => '0');
            leftShiftRegister <= (others => '0');
            rightShiftRegister <= (others => '0');
            
            pastI2SClock <= '0';
			
           -- switch <= '0';
		elsif rising_edge(clock) then
		
           
           
            if LRCK1 = '1' and pastLRCK = '0' then  
                pastLRCK <= '1'; 
                frameCounter <= (others => '0');
            elsif LRCK1 = '0' and pastLRCK = '1' then
                pastLRCK <= '0';
                frameCounter <= (others => '0');   
            end if ; 
            
            if CLKI2s = '1' and pastI2SClock = '0' then  
                pastI2SClock <= '1'; 
                 frameCounter <= frameCounter+1;
            elsif CLKI2s = '0' and pastI2SClock = '1' then
                pastI2SClock <= '0';
                
               
            end if;
               
                

            LRCK <= LRCK1;
            SCK <= CLKI2s;
            
            if LRCK1 = '1' then 
                DOUT <= leftShiftRegister(DATA_WIDTH-1); 
                leftShiftRegister <= shift_left(audioLeft,to_integer(frameCounter));
            else 
                DOUT <= rightShiftRegister(DATA_WIDTH-1); 
                rightShiftRegister <= shift_left(audioRight,to_integer(frameCounter));
            end if;            
            
          
           
		end if;
	end process FlipFlopAndResize;
END ARCHITECTURE inputLRCK;





-- VHDL Entity Splitter.StoM.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 16:02:39 31.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY StoM IS
    GENERIC( 
        signalOBitNb : positive
    );
    PORT( 
        audioLeft  : IN     signed (signalOBitNb-1 DOWNTO 0);
        audioRight : IN     signed (signalOBitNb-1 DOWNTO 0);
        audioMono  : OUT    signed (signalOBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic
    );

-- Declarations

END StoM ;





--
-- VHDL Architecture Splitter.StereoToMono.iis
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 14:02:34 23/05/2023
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;



--
ARCHITECTURE iis OF StoM IS

    signal temp1 :  signed (signalOBitNb DOWNTO 0);
    signal temp2 :  signed (signalOBitNb DOWNTO 0);
    
BEGIN

    stereoToMono : process(clock,reset) 
    begin
        if reset = '1' then
			temp1 <= (others => '0');
            temp2 <= (others => '0');
		elsif rising_edge(clock) then
            --temp1 <= resize(shift_right((resize(audioRight,temp1'length+1)+audioLeft),1),temp1'length);
            temp1 <= resize(audioRight,temp1'length)+audioLeft;
            temp2 <= shift_right(temp1,1);
            audioMono <= temp1;
            
        end if;
    end process stereoToMono;



END ARCHITECTURE iis;





-- VHDL Entity Splitter.risingEdgeDetector.symbol
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 09:00:47 02.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

ENTITY risingEdgeDetector IS
    PORT( 
        clock     : IN     std_logic;
        dataValid : IN     std_logic;
        reset     : IN     std_logic;
        en        : OUT    std_logic
    );

-- Declarations

END risingEdgeDetector ;






ARCHITECTURE edge OF risingEdgeDetector IS

    signal oldSignal : std_logic;

BEGIN

    risingEdge : process(clock,reset)
    begin 
    
        if reset = '1' then
			oldSignal <= '0';
		elsif rising_edge(clock) then
            en <= '0';
            if dataValid = '1' and oldSignal = '0' then 
                en <= '1';
                oldSignal <= '1';
            elsif  dataValid = '0' and oldSignal = '1' then 
                 oldSignal <= '0';
            end if;
        end if ;  
    end process risingEdge;

END ARCHITECTURE edge;





--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 15:53:12 02.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

-- LIBRARY Splitter;
-- LIBRARY Splitter_test;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations
    constant DATA_WIDTH : positive := 32;
    constant COEFF_BIT_NB : positive := 16;
    constant FILTER_TAP_NB : positive := 33;
    constant DATA_IN_WIDTH : positive := 32;

    -- Internal signal declarations
    SIGNAL DOUT        : std_ulogic;
    SIGNAL LRCK        : std_ulogic;
    SIGNAL SCK         : std_ulogic;
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight1 : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audio_L_out : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audio_R_out : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;
    SIGNAL en          : std_logic;


    -- Component Declarations
    COMPONENT StoM
    GENERIC (
        signalOBitNb : positive
    );
    PORT (
        audioLeft  : IN     signed (signalOBitNb-1 DOWNTO 0);
        audioRight : IN     signed (signalOBitNb-1 DOWNTO 0);
        audioMono  : OUT    signed (signalOBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT iisDecoder
    GENERIC (
        DATA_IN_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic ;
        LRCK1      : IN     std_uLogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_IN_WIDTH : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_IN_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : StoM USE ENTITY Splitter.StoM;
--     FOR ALL : bascule USE ENTITY Splitter_test.bascule;
--     FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
--     FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
--     FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    Data_O <= DOUT;
    LR_O <= LRCK;
    CLK_O <= SCK;
    
    --Data_O <= Data_I;
    --LR_O <= LR_I;
    --CLK_O <= CLK_I;
    


    -- Instance port mappings.
    I3 : StoM
        GENERIC MAP (
            signalOBitNb => DATA_IN_WIDTH
        )
        PORT MAP (
            audioLeft  => audio_L_out,
            audioRight => audio_R_out,
            audioMono  => audioRight1,
            clock      => clock,
            reset      => reset
        );
    I0 : iisDecoder
        GENERIC MAP (
            DATA_IN_WIDTH => DATA_IN_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioRight1,
            audioRight => audioRight1,
            LRCK       => LRCK,
            SCK        => SCK,
            DOUT       => DOUT,
            CLKI2s     => CLK_I,
            LRCK1      => LR_I
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => dataValid,
            reset     => reset,
            en        => en
        );
    I1 : bascule
        GENERIC MAP (
            DATA_IN_WIDTH => DATA_IN_WIDTH
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => en,
            reset       => reset,
            audio_L_out => audio_L_out,
            audio_R_out => audio_R_out
        );

END visitorsVersion;




-- VHDL Entity gates.inverter.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:35:14 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY inverter IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        in1  : IN     std_uLogic;
        out1 : OUT    std_uLogic
    );

-- Declarations

END inverter ;





ARCHITECTURE sim OF inverter IS
BEGIN
  out1 <= NOT in1 after delay;
END sim;




-- VHDL Entity gates.logic1.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 14:35:13 11.09.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY logic1 IS
    PORT( 
        logic_1 : OUT    std_uLogic
    );

-- Declarations

END logic1 ;





ARCHITECTURE sim OF logic1 IS
BEGIN
  logic_1 <= '1';
END sim;




-- VHDL Entity sequential.DFF.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:46:19 08/28/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY DFF IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        CLK : IN     std_uLogic;
        CLR : IN     std_uLogic;
        D   : IN     std_uLogic;
        Q   : OUT    std_uLogic
    );

-- Declarations

END DFF ;





ARCHITECTURE sim OF DFF IS
BEGIN

  process(clk, clr)
  begin
    if clr = '1' then
      q <= '0' after delay;
    elsif rising_edge(clk) then
      q <= d after delay;
    end if;
  end process;

END sim;




--
-- VHDL Architecture Board.FPGA_splitter.struct
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 11:51:31 30.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;
-- LIBRARY Common;
  use work.CommonLib.all;

-- LIBRARY sequential;
-- LIBRARY Splitter;

ARCHITECTURE struct OF FPGA_splitter IS

    -- Architecture declarations
    constant clockFrequency: real := 66.0E6;
    constant rs232BaudRate: real := 115.2E3;
    constant pwmFrequency: real := 100.0E3;
    constant mainsFrequency: real := 50.0;
    constant debounceCounterBitNb: positive := requiredBitNb(integer(clockFrequency/100.0));
    constant spikeFilterCounterBitNb: positive := requiredBitNb(10);
    constant buttonsRepeatFrequency: real := 100.0;
    constant controlAmplitudeBitNb: natural := 10;
    constant proportionalShift: integer := -14;
    constant integratorShift: integer := -12;
    constant testLineNb: positive := 16;

    -- Internal signal declarations
    SIGNAL CLK_I        : std_uLogic;
    SIGNAL Data_I       : std_uLogic;
    SIGNAL LR_I         : std_uLogic;
    SIGNAL reset        : std_ulogic;
    SIGNAL reset1       : std_ulogic;
    SIGNAL resetSynch   : std_ulogic;
    SIGNAL resetSynch_n : std_ulogic;


    -- Component Declarations
    COMPONENT inverter
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT logic1
    PORT (
        logic_1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT DFF
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        D   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT leftRightSplitter
    GENERIC (
        signalBitNb  : positive := 24;
        signalOBitNb : positive := 32
    );
    PORT (
        CLK_I  : IN     std_uLogic ;
        Data_I : IN     std_uLogic ;
        LR_I   : IN     std_uLogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        CLK_O  : OUT    std_uLogic ;
        Data_O : OUT    std_uLogic ;
        LR_O   : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : DFF USE ENTITY sequential.DFF;
--     FOR ALL : inverter USE ENTITY gates.inverter;
--     FOR ALL : leftRightSplitter USE ENTITY Splitter.leftRightSplitter;
--     FOR ALL : logic1 USE ENTITY gates.logic1;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I1 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => reset_n,
            out1 => reset
        );
    I7 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => resetSynch_n,
            out1 => resetSynch
        );
    I28 : logic1
        PORT MAP (
            logic_1 => reset1
        );
    I_rst : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => reset,
            D   => reset1,
            Q   => resetSynch_n
        );
    I_rst1 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => LR_In,
            Q   => LR_I
        );
    I_rst2 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => Data_In,
            Q   => Data_I
        );
    I_rst3 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => CLK_In,
            Q   => CLK_I
        );
    I0 : leftRightSplitter
        GENERIC MAP (
            signalBitNb  => 24,
            signalOBitNb => 32
        )
        PORT MAP (
            CLK_I  => CLK_I,
            Data_I => Data_I,
            LR_I   => LR_I,
            clock  => clock,
            reset  => resetSynch,
            CLK_O  => CLK_O,
            Data_O => Data_O,
            LR_O   => LR_O
        );

END struct;




