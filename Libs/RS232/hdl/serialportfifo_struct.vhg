--
-- VHDL Architecture RS232.serialPortFIFO.struct
--
-- Created:
--          by - francois.francois (Aphrodite)
--          at - 09:52:59 05/24/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY Memory;
LIBRARY RS232;

ARCHITECTURE struct OF serialPortFIFO IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL txSend      : std_ulogic;
   SIGNAL rxWord      : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
   SIGNAL rxWordValid : std_ulogic;
   SIGNAL txFifoEmpty : std_ulogic;
   SIGNAL txWord      : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
   SIGNAL txBusy      : std_ulogic;


   -- Component Declarations
   COMPONENT FIFO
   GENERIC (
      dataBitNb : positive := 8;
      depth     : positive := 8
   );
   PORT (
      write   : IN     std_ulogic ;
      clock   : IN     std_ulogic ;
      reset   : IN     std_ulogic ;
      dataOut : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      read    : IN     std_ulogic ;
      dataIn  : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      empty   : OUT    std_ulogic ;
      full    : OUT    std_ulogic 
   );
   END COMPONENT;
   COMPONENT serialPortReceiver
   GENERIC (
      dataBitNb      : positive := 8;
      baudRateDivide : positive := 2083
   );
   PORT (
      RxD       : IN     std_ulogic ;
      clock     : IN     std_ulogic ;
      reset     : IN     std_ulogic ;
      dataOut   : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      dataValid : OUT    std_ulogic 
   );
   END COMPONENT;
   COMPONENT serialPortTransmitter
   GENERIC (
      dataBitNb      : positive := 8;
      baudRateDivide : positive := 2083
   );
   PORT (
      TxD    : OUT    std_ulogic ;
      clock  : IN     std_ulogic ;
      reset  : IN     std_ulogic ;
      dataIn : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
      send   : IN     std_ulogic ;
      busy   : OUT    std_ulogic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : FIFO USE ENTITY Memory.FIFO;
   FOR ALL : serialPortReceiver USE ENTITY RS232.serialPortReceiver;
   FOR ALL : serialPortTransmitter USE ENTITY RS232.serialPortTransmitter;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   process(reset, clock)
     begin
       if reset = '1' then
         txSend <= '0';
       elsif rising_edge(clock) then
         if ( (txFifoEmpty = '0') and (txBusy = '0') ) then
           txSend <= '1';
         else
           txSend <= '0';
         end if;
       end if;
     end process;
         


   -- Instance port mappings.
   I_rxFifo : FIFO
      GENERIC MAP (
         dataBitNb => dataBitNb,
         depth     => rxFifoDepth
      )
      PORT MAP (
         write   => rxWordValid,
         clock   => clock,
         reset   => reset,
         dataOut => rxData,
         read    => rxRd,
         dataIn  => rxWord,
         empty   => rxEmpty,
         full    => OPEN
      );
   I_txFifo : FIFO
      GENERIC MAP (
         dataBitNb => dataBitNb,
         depth     => txFifoDepth
      )
      PORT MAP (
         write   => txWr,
         clock   => clock,
         reset   => reset,
         dataOut => txWord,
         read    => txSend,
         dataIn  => txData,
         empty   => txFifoEmpty,
         full    => txFull
      );
   I_rx : serialPortReceiver
      GENERIC MAP (
         dataBitNb      => dataBitNb,
         baudRateDivide => baudRateDivide
      )
      PORT MAP (
         RxD       => RxD,
         clock     => clock,
         reset     => reset,
         dataOut   => rxWord,
         dataValid => rxWordValid
      );
   I_tx : serialPortTransmitter
      GENERIC MAP (
         dataBitNb      => dataBitNb,
         baudRateDivide => baudRateDivide
      )
      PORT MAP (
         TxD    => TxD,
         clock  => clock,
         reset  => reset,
         dataIn => txWord,
         send   => txSend,
         busy   => txBusy
      );

END struct;
