--
-- VHDL Architecture GeneratorControl.frequencyRegulators.struct
--
-- Created:
--          by - francois.francois (Hyperion)
--          at - 09:25:30 09/20/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

LIBRARY GeneratorControl;

ARCHITECTURE struct OF frequencyRegulators IS

   -- Architecture declarations
   constant uartBitNb : positive := 8;

   -- Internal signal declarations
   SIGNAL controlAmplitudeI    : unsigned(controlAmplitudeBitNb-1 DOWNTO 0);
   SIGNAL controlAmplitudePI   : unsigned(controlAmplitudeBitNb-1 DOWNTO 0);
   SIGNAL controlAmplitudeUart : unsigned(controlAmplitudeBitNb-1 DOWNTO 0);
   SIGNAL enPI                 : std_ulogic;
   SIGNAL enUart               : std_ulogic;
   SIGNAL selI                 : std_ulogic;


   -- Component Declarations
   COMPONENT frequencyRegulatorI
   GENERIC (
      periodBitNb           : positive := 16;
      controlAmplitudeBitNb : positive := 8
   );
   PORT (
      clock            : IN     std_ulogic ;
      en               : IN     std_ulogic ;
      periodDiff       : IN     signed (periodBitNb-1 DOWNTO 0);
      reset            : IN     std_ulogic ;
      sel              : IN     std_ulogic ;
      controlAmplitude : OUT    unsigned (controlAmplitudeBitNb-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT frequencyRegulatorPI
   GENERIC (
      periodBitNb           : positive := 16;
      controlAmplitudeBitNb : positive := 8;
      proportionalShift     : integer  := 0;
      integralShift         : integer  := 0
   );
   PORT (
      clock            : IN     std_ulogic ;
      en               : IN     std_ulogic ;
      periodDiff       : IN     signed (periodBitNb-1 DOWNTO 0);
      reset            : IN     std_ulogic ;
      controlAmplitude : OUT    unsigned (controlAmplitudeBitNb-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT frequencyRegulatorUart
   GENERIC (
      periodBitNb           : positive := 16;
      controlAmplitudeBitNb : positive := 8;
      baudRateDivide        : positive := 2083
   );
   PORT (
      clock            : IN     std_ulogic ;
      en               : IN     std_ulogic ;
      periodDiff       : IN     signed (periodBitNb-1 DOWNTO 0);
      reset            : IN     std_ulogic ;
      rxD              : IN     std_ulogic ;
      controlAmplitude : OUT    unsigned (controlAmplitudeBitNb-1 DOWNTO 0);
      txD              : OUT    std_ulogic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : frequencyRegulatorI USE ENTITY GeneratorControl.frequencyRegulatorI;
   FOR ALL : frequencyRegulatorPI USE ENTITY GeneratorControl.frequencyRegulatorPI;
   FOR ALL : frequencyRegulatorUart USE ENTITY GeneratorControl.frequencyRegulatorUart;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   controlAmplitude <= controlAmplitudeI when regulationType = 2
     else controlAmplitudeUart when regulationType = 3
     else controlAmplitudePI;

   -- HDL Embedded Text Block 2 eb2
   enPI <= en when regulationType = 0
     else '0';
   
   selI <= '1' when regulationType = 2
     else '0';
   
   enUart <= en;


   -- Instance port mappings.
   I_I : frequencyRegulatorI
      GENERIC MAP (
         periodBitNb           => periodBitNb,
         controlAmplitudeBitNb => controlAmplitudeBitNb
      )
      PORT MAP (
         clock            => clock,
         en               => en,
         periodDiff       => periodDiff,
         reset            => reset,
         sel              => selI,
         controlAmplitude => controlAmplitudeI
      );
   I_PI : frequencyRegulatorPI
      GENERIC MAP (
         periodBitNb           => periodBitNb,
         controlAmplitudeBitNb => controlAmplitudeBitNb,
         proportionalShift     => proportionalShift,
         integralShift         => integralShift
      )
      PORT MAP (
         clock            => clock,
         en               => enPI,
         periodDiff       => periodDiff,
         reset            => reset,
         controlAmplitude => controlAmplitudePI
      );
   I_Uart : frequencyRegulatorUart
      GENERIC MAP (
         periodBitNb           => PeriodBitNb,
         controlAmplitudeBitNb => controlAmplitudeBitNb,
         baudRateDivide        => baudRateDivide
      )
      PORT MAP (
         clock            => clock,
         en               => enUart,
         periodDiff       => periodDiff,
         reset            => reset,
         rxD              => rxD,
         controlAmplitude => controlAmplitudeUart,
         txD              => txD
      );

END struct;
