--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 09:38:42 15.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
  USE gates.gates.all;
LIBRARY Common;
  USE Common.CommonLib.all;

LIBRARY Splitter;
LIBRARY Splitter_test;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations
    constant DATA_WIDTH : positive := 32;
    constant COEFF_BIT_NB : positive := 16;
    constant FILTER_TAP_NB : positive := 55;
    constant DATA_IN_WIDTH : positive := 32;

    -- Internal signal declarations
    SIGNAL HighpassOut : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL LowPassOut  : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioMod    : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioMod1   : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audio_L_out : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;
    SIGNAL en          : std_logic;
    SIGNAL lr2         : std_ulogic;


    -- Component Declarations
    COMPONENT HighPass
    GENERIC (
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive;
        DATA_WIDTH    : positive
    );
    PORT (
        audioIn     : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        en          : IN     std_logic ;
        reset       : IN     std_ulogic ;
        HighpassOut : OUT    signed (DATA_WIDTH-1  DOWNTO  0)
    );
    END COMPONENT;
    COMPONENT Lowpass1
    GENERIC (
        DATA_WIDTH    : positive;
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive
    );
    PORT (
        audioIn    : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock      : IN     std_logic ;
        en         : IN     std_logic ;
        reset      : IN     std_logic ;
        LowPassOut : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT eq
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        audioFull : IN     signed (DATA_WIDTH-1  DOWNTO  0);
        b0        : IN     std_ulogic ;
        b1        : IN     std_ulogic ;
        b2        : IN     std_ulogic ;
        b3        : IN     std_ulogic ;
        audioMod  : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT iisDecoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        lr2        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic ;
        LRCK1      : IN     std_uLogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : HighPass USE ENTITY Splitter.HighPass;
    FOR ALL : Lowpass1 USE ENTITY Splitter.Lowpass1;
    FOR ALL : bascule USE ENTITY Splitter_test.bascule;
    FOR ALL : eq USE ENTITY Splitter.eq;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I4 : HighPass
        GENERIC MAP (
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB,
            DATA_WIDTH    => DATA_WIDTH
        )
        PORT MAP (
            audioIn     => audio_L_out,
            clock       => clock,
            en          => en,
            reset       => reset,
            HighpassOut => HighpassOut
        );
    I3 : Lowpass1
        GENERIC MAP (
            DATA_WIDTH    => DATA_WIDTH,
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB
        )
        PORT MAP (
            audioIn    => audio_L_out,
            clock      => clock,
            en         => en,
            reset      => reset,
            LowPassOut => LowPassOut
        );
    I6 : eq
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            audioFull => HighpassOut,
            b0        => S30,
            b1        => S33,
            b2        => S32,
            b3        => S31,
            audioMod  => audioMod
        );
    I7 : eq
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            audioFull => LowPassOut,
            b0        => S40,
            b1        => S43,
            b2        => S42,
            b3        => S41,
            audioMod  => audioMod1
        );
    I0 : iisDecoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight,
            lr2        => lr2
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioMod1,
            audioRight => audioMod,
            LRCK       => LR_O,
            SCK        => CLK_O,
            DOUT       => Data_O,
            CLKI2s     => CLK_I,
            LRCK1      => lr2
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => dataValid,
            reset     => reset,
            en        => en
        );
    I1 : bascule
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => en,
            reset       => reset,
            audio_L_out => audio_L_out,
            audio_R_out => OPEN
        );

END visitorsVersion;
