--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxim.UNKNOWN (DESKTOP-ADLE19A)
--          at - 17:23:08 13/07/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
  USE gates.gates.all;
LIBRARY Common;
  USE Common.CommonLib.all;

LIBRARY Splitter;
LIBRARY Splitter_test;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations
    constant DATA_WIDTH : positive := 32;
    constant COEFF_BIT_NB : positive := 16;
    constant FILTER_TAP_NB : positive := 99;
    constant DATA_IN_WIDTH : positive := 32;

    -- Internal signal declarations
    SIGNAL DOUT        : std_ulogic;
    SIGNAL Data        : std_ulogic;
    SIGNAL DataReady   : std_ulogic;
    SIGNAL DebugData   : unsigned(1 DOWNTO 0);
    SIGNAL Frameout0   : std_uLogic;
    SIGNAL LRCK        : std_ulogic;
    SIGNAL NewData     : std_uLogic;
    SIGNAL Next_data   : std_ulogic;
    SIGNAL SCK         : std_ulogic;
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioLeft1  : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight1 : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audio_R_out : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;
    SIGNAL din         : unsigned(15 DOWNTO 0);
    SIGNAL dout1       : unsigned(15 DOWNTO 0);
    SIGNAL en          : std_logic;
    SIGNAL end_Calc    : std_ulogic;
    SIGNAL highPass    : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL lowPass     : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL rdaddr      : unsigned(15 DOWNTO 0);
    SIGNAL re          : std_ulogic;
    SIGNAL we          : std_ulogic;
    SIGNAL wraddr      : unsigned(15 DOWNTO 0);


    -- ModuleWare signal declarations(v1.12) for instance 'I10' of 'ramdp'
    
    TYPE MW_I10RAM_TYPE IS ARRAY (((2**16) -1) DOWNTO 0) OF unsigned(15 DOWNTO 0);
    SIGNAL mw_I10ram_table : MW_I10RAM_TYPE := (OTHERS => "0000000000000000");

    -- Component Declarations
    COMPONENT SeialSync
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        DataReady   : IN     std_ulogic ;
        LR_I        : IN     std_uLogic ;
        NewData     : IN     std_uLogic ;
        clock       : IN     std_uLogic ;
        highPass    : IN     signed (DATA_WIDTH-1  DOWNTO  0);
        lowPass     : IN     signed (DATA_WIDTH-1  DOWNTO  0);
        reset       : IN     std_uLogic ;
        audioLeft1  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight1 : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT Xover_with_RAM
    GENERIC (
        DATA_WIDTH    : positive;
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive
    );
    PORT (
        audio_In  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock     : IN     std_ulogic ;
        dout1     : IN     unsigned (15 DOWNTO 0);
        en        : IN     std_logic ;
        reset     : IN     std_ulogic ;
        DataReady : OUT    std_ulogic ;
        DebugData : OUT    unsigned (1 DOWNTO 0);
        din       : OUT    unsigned (15 DOWNTO 0);
        highPass  : OUT    signed (DATA_WIDTH-1  DOWNTO  0);
        lowPass   : OUT    signed (DATA_WIDTH-1  DOWNTO  0);
        rdaddr    : OUT    unsigned (15 DOWNTO 0);
        re        : OUT    std_ulogic ;
        we        : OUT    std_ulogic ;
        wraddr    : OUT    unsigned (15 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT delayer
    PORT (
        Data         : IN     std_ulogic ;
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        Data_delayed : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT iisDecoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        lr2        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic ;
        LRCK1      : IN     std_uLogic ;
        NewData    : OUT    std_uLogic ;
        Frameout0  : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT muxOut
    PORT (
        CLK_I  : IN     std_uLogic ;
        DOUT   : IN     std_ulogic ;
        Data_I : IN     std_uLogic ;
        LRCK   : IN     std_ulogic ;
        LR_I   : IN     std_uLogic ;
        S20    : IN     std_ulogic ;
        SCK    : IN     std_ulogic ;
        CLK_O  : OUT    std_uLogic ;
        Data_O : OUT    std_uLogic ;
        LR_O   : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : SeialSync USE ENTITY Splitter.SeialSync;
    FOR ALL : Xover_with_RAM USE ENTITY Splitter.Xover_with_RAM;
    FOR ALL : bascule USE ENTITY Splitter_test.bascule;
    FOR ALL : delayer USE ENTITY Splitter.delayer;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
    FOR ALL : muxOut USE ENTITY Splitter.muxOut;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    testOut(0) <= DebugData(1);
    testOut(1) <= DebugData(0);
    testOut(2) <= audio_R_out(audio_R_out'high);
    testOut(3) <= audio_R_out(audio_R_out'high-1);
    testOut(4) <= audioRight1(audioRight'high-4);
    testOut(5) <= Frameout0;
    testOut(6) <= '0';


    -- ModuleWare code(v1.12) for instance 'I10' of 'ramdp'
    --attribute block_ram : boolean;
    --attribute block_ram of mem : signal is false;
    i10write_proc: PROCESS (clock)
    BEGIN
        IF (clock'EVENT AND clock='1') THEN
            IF (we = '1') THEN
                mw_I10ram_table(TO_INTEGER(wraddr)) <= din;
            END IF;
        END IF;
    END PROCESS i10write_proc;
    
    i10read_proc: PROCESS (clock)
    BEGIN
        IF (clock'EVENT AND clock='1') THEN
            IF (re = '1') THEN
                dout1 <= mw_I10ram_table(TO_INTEGER(rdaddr));
            END IF;
        END IF;
    END PROCESS i10read_proc;

    -- Instance port mappings.
    I4 : SeialSync
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            DataReady   => end_Calc,
            LR_I        => LR_I,
            NewData     => Next_data,
            clock       => clock,
            highPass    => highPass,
            lowPass     => lowPass,
            reset       => reset,
            audioLeft1  => audioLeft1,
            audioRight1 => audioRight1
        );
    I11 : Xover_with_RAM
        GENERIC MAP (
            DATA_WIDTH    => DATA_WIDTH,
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB
        )
        PORT MAP (
            audio_In  => audio_R_out,
            clock     => clock,
            dout1     => dout1,
            en        => en,
            reset     => reset,
            DataReady => DataReady,
            DebugData => DebugData,
            din       => din,
            highPass  => highPass,
            lowPass   => lowPass,
            rdaddr    => rdaddr,
            re        => re,
            we        => we,
            wraddr    => wraddr
        );
    I9 : delayer
        PORT MAP (
            Data         => Data,
            clock        => clock,
            reset        => reset,
            Data_delayed => en
        );
    I0 : iisDecoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight,
            lr2        => OPEN
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioLeft1,
            audioRight => audioRight1,
            LRCK       => LRCK,
            SCK        => SCK,
            DOUT       => DOUT,
            CLKI2s     => CLK_I,
            LRCK1      => LR_I,
            NewData    => NewData,
            Frameout0  => Frameout0
        );
    I8 : muxOut
        PORT MAP (
            CLK_I  => CLK_I,
            DOUT   => DOUT,
            Data_I => Data_I,
            LRCK   => LRCK,
            LR_I   => LR_I,
            S20    => S20,
            SCK    => SCK,
            CLK_O  => CLK_O,
            Data_O => Data_O,
            LR_O   => LR_O
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => dataValid,
            reset     => reset,
            en        => Data
        );
    I6 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => DataReady,
            reset     => reset,
            en        => end_Calc
        );
    I7 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => NewData,
            reset     => reset,
            en        => Next_data
        );
    I1 : bascule
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => Data,
            reset       => reset,
            audio_L_out => OPEN,
            audio_R_out => audio_R_out
        );

END visitorsVersion;
