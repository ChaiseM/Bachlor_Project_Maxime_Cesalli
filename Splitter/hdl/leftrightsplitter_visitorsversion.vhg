--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 15:07:10 22.06.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
  USE gates.gates.all;
LIBRARY Common;
  USE Common.CommonLib.all;

LIBRARY Splitter;
LIBRARY Splitter_test;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations
    constant DATA_WIDTH : positive := 32;
    constant COEFF_BIT_NB : positive := 16;
    constant FILTER_TAP_NB : positive := 99;
    constant DATA_IN_WIDTH : positive := 32;

    -- Internal signal declarations
    SIGNAL DOUT        : std_ulogic;
    SIGNAL DataReady   : std_ulogic;
    SIGNAL HighpassOut : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL LRCK        : std_ulogic;
    SIGNAL SCK         : std_ulogic;
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audio_L_out : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audio_R_out : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;
    SIGNAL data_SYNC   : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL en          : std_logic;


    -- Component Declarations
    COMPONENT HighPass
    GENERIC (
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive;
        DATA_WIDTH    : positive
    );
    PORT (
        audioIn     : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        en          : IN     std_logic ;
        reset       : IN     std_ulogic ;
        DataReady   : OUT    std_ulogic ;
        HighpassOut : OUT    signed (DATA_WIDTH-1  DOWNTO  0)
    );
    END COMPONENT;
    COMPONENT Sync
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        clock      : IN     std_ulogic ;
        data_Ready : IN     std_ulogic ;
        data_in    : IN     signed (DATA_WIDTH-1  DOWNTO  0);
        reset      : IN     std_ulogic ;
        data_SYNC  : OUT    signed (DATA_WIDTH-1  DOWNTO  0)
    );
    END COMPONENT;
    COMPONENT iisDecoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        lr2        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic ;
        LRCK1      : IN     std_uLogic 
    );
    END COMPONENT;
    COMPONENT muxOut
    PORT (
        CLK_I  : IN     std_uLogic ;
        DOUT   : IN     std_ulogic ;
        Data_I : IN     std_uLogic ;
        LRCK   : IN     std_ulogic ;
        LR_I   : IN     std_uLogic ;
        S20    : IN     std_ulogic ;
        SCK    : IN     std_ulogic ;
        CLK_O  : OUT    std_uLogic ;
        Data_O : OUT    std_uLogic ;
        LR_O   : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : HighPass USE ENTITY Splitter.HighPass;
    FOR ALL : Sync USE ENTITY Splitter.Sync;
    FOR ALL : bascule USE ENTITY Splitter_test.bascule;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
    FOR ALL : muxOut USE ENTITY Splitter.muxOut;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I3 : HighPass
        GENERIC MAP (
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB,
            DATA_WIDTH    => DATA_WIDTH
        )
        PORT MAP (
            audioIn     => audio_L_out,
            clock       => clock,
            en          => en,
            reset       => reset,
            DataReady   => DataReady,
            HighpassOut => HighpassOut
        );
    I4 : Sync
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            clock      => clock,
            data_Ready => DataReady,
            data_in    => HighpassOut,
            reset      => reset,
            data_SYNC  => data_SYNC
        );
    I0 : iisDecoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight,
            lr2        => OPEN
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audio_R_out,
            audioRight => data_SYNC,
            LRCK       => LRCK,
            SCK        => SCK,
            DOUT       => DOUT,
            CLKI2s     => CLK_I,
            LRCK1      => LR_I
        );
    I8 : muxOut
        PORT MAP (
            CLK_I  => CLK_I,
            DOUT   => DOUT,
            Data_I => Data_I,
            LRCK   => LRCK,
            LR_I   => LR_I,
            S20    => S20,
            SCK    => SCK,
            CLK_O  => CLK_O,
            Data_O => Data_O,
            LR_O   => LR_O
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => dataValid,
            reset     => reset,
            en        => en
        );
    I1 : bascule
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => en,
            reset       => reset,
            audio_L_out => audio_L_out,
            audio_R_out => audio_R_out
        );

END visitorsVersion;
