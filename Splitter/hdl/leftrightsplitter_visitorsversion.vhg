--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 16:24:51 30.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
  USE gates.gates.all;
LIBRARY Common;
  USE Common.CommonLib.all;

LIBRARY Splitter;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations
    constant DATA_WIDTH : positive := 32;
    constant COEFF_BIT_NB : positive := 16;
    constant FILTER_TAP_NB : positive := 33;
    constant DATA_IN_WIDTH : positive := 24;

    -- Internal signal declarations
    SIGNAL ShiftData   : std_ulogic;
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioLeftO  : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioOut    : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioRightO : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;
    SIGNAL en          : std_logic;


    -- Component Declarations
    COMPONENT Lowpass1
    GENERIC (
        DATA_WIDTH    : positive;
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive
    );
    PORT (
        audioIn  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock    : IN     std_logic ;
        en       : IN     std_logic ;
        reset    : IN     std_logic ;
        audioOut : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT iisDecoder
    GENERIC (
        DATA_IN_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        ShiftData  : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic 
    );
    END COMPONENT;
    COMPONENT iisResizer
    GENERIC (
        DATA_IN_WIDTH : positive;
        DATA_WIDTH    : positive
    );
    PORT (
        dataValidI  : IN     std_ulogic ;
        audioLeftI  : IN     signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audioRightI : IN     signed (DATA_IN_WIDTH-1 DOWNTO 0);
        ShiftData   : IN     std_ulogic ;
        audioLeftO  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRightO : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        reset       : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : Lowpass1 USE ENTITY Splitter.Lowpass1;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
    FOR ALL : iisResizer USE ENTITY Splitter.iisResizer;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I4 : Lowpass1
        GENERIC MAP (
            DATA_WIDTH    => DATA_WIDTH,
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB
        )
        PORT MAP (
            audioIn  => audioRightO,
            clock    => clock,
            en       => en,
            reset    => reset,
            audioOut => audioOut
        );
    I0 : iisDecoder
        GENERIC MAP (
            DATA_IN_WIDTH => DATA_IN_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioLeftO,
            audioRight => audioOut,
            LRCK       => LR_O,
            SCK        => CLK_O,
            DOUT       => Data_O,
            ShiftData  => ShiftData,
            CLKI2s     => CLK_I
        );
    I1 : iisResizer
        GENERIC MAP (
            DATA_IN_WIDTH => DATA_IN_WIDTH,
            DATA_WIDTH    => DATA_WIDTH
        )
        PORT MAP (
            dataValidI  => dataValid,
            audioLeftI  => audioLeft,
            audioRightI => audioRight,
            ShiftData   => ShiftData,
            audioLeftO  => audioLeftO,
            audioRightO => audioRightO,
            clock       => clock,
            reset       => reset
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => dataValid,
            reset     => reset,
            en        => en
        );

END visitorsVersion;
