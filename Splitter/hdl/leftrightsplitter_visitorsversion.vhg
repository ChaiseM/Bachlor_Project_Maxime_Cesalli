--
-- VHDL Architecture Splitter.leftRightSplitter.visitorsVersion
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 17:43:17 02.08.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
  USE gates.gates.all;
LIBRARY Common;
  USE Common.CommonLib.all;

LIBRARY Memory;
LIBRARY Splitter;
LIBRARY Splitter_test;

ARCHITECTURE visitorsVersion OF leftRightSplitter IS

    -- Architecture declarations
    constant DATA_WIDTH : positive := 32;
    constant COEFF_BIT_NB : positive := 32;
    constant FILTER_TAP_NB : positive := 649;
    constant DATA_IN_WIDTH : positive := 32;
    constant addressBitNb :positive := 12;
    constant dataBitNb :positive := 16;
    constant initFile : string := "bramInit.txt";
    constant uartDataBitNb : positive := 7;
    constant uartBaudRate: real := 9.6E3;
    constant clockFrequency: real := 66.0E6;

    -- Internal signal declarations
    SIGNAL DOUT        : std_ulogic;
    SIGNAL Data        : std_ulogic;
    SIGNAL DataReady   : std_ulogic;
    SIGNAL Debug       : std_ulogic;
    SIGNAL DebugData   : unsigned(1 DOWNTO 0);
    SIGNAL Frameout0   : std_uLogic;
    SIGNAL LRCK        : std_ulogic;
    SIGNAL NewData     : std_uLogic;
    SIGNAL Next_data   : std_ulogic;
    SIGNAL RS232Data   : std_ulogic_vector(uartDataBitNb-1 DOWNTO 0);
    SIGNAL RS232Valid  : std_ulogic;
    SIGNAL SCK         : std_ulogic;
    SIGNAL addressB    : std_ulogic_vector(addressBitNb-1 DOWNTO 0);
    SIGNAL addressB1   : std_ulogic_vector(addressBitNb-1 DOWNTO 0);
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioLeft1  : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH-1 DOWNTO 0);
    SIGNAL audioRight1 : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL audio_R_out : signed(DATA_WIDTH-1 DOWNTO 0);
    SIGNAL dataInB     : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL dataOutA    : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL dataOutB    : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL dataValid   : std_ulogic;
    SIGNAL debug0      : std_ulogic;
    SIGNAL din         : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL en          : std_logic;
    SIGNAL enB         : std_ulogic;
    SIGNAL enB1        : std_ulogic;
    SIGNAL end_Calc    : std_ulogic;
    SIGNAL highPass    : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL lowPass     : signed(DATA_WIDTH-1  DOWNTO  0);
    SIGNAL rdaddr      : std_ulogic_vector(addressBitNb-1 DOWNTO 0);
    SIGNAL re          : std_ulogic;
    SIGNAL we          : std_ulogic;
    SIGNAL wraddr      : std_ulogic_vector(addressBitNb-1 DOWNTO 0);
    SIGNAL writeEnA    : std_ulogic;
    SIGNAL writeEnB    : std_ulogic;
    SIGNAL writeEnB1   : std_ulogic;


    -- Component Declarations
    COMPONENT bramDualport
    GENERIC (
        addressBitNb : positive := 8;
        dataBitNb    : positive := 8;
        initFile     : string   := "bramInit.txt"
    );
    PORT (
        clockA   : IN     std_ulogic ;
        enA      : IN     std_ulogic ;
        writeEnA : IN     std_ulogic ;
        addressA : IN     std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        dataInA  : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        dataOutA : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        clockB   : IN     std_ulogic ;
        enB      : IN     std_ulogic ;
        writeEnB : IN     std_ulogic ;
        addressB : IN     std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        dataInB  : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        dataOutB : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT CoeffWriter
    GENERIC (
        addressBitNb  : positive;
        dataBitNb     : positive;
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive;
        DATA_WIDTH    : positive
    );
    PORT (
        clock    : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        addressB : OUT    std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        dataInB  : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        enB      : OUT    std_ulogic ;
        writeEnB : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT RAMmultiplexer
    GENERIC (
        addressBitNb : positive
    );
    PORT (
        addressB  : IN     std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        enB       : IN     std_ulogic ;
        rdaddr    : IN     std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        re        : IN     std_ulogic ;
        writeEnB  : IN     std_ulogic ;
        addressB1 : OUT    std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        enB1      : OUT    std_ulogic ;
        writeEnB1 : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT RS232_reciver
    GENERIC (
        uartDataBitNb  : positive;
        baudRateDivide : positive
    );
    PORT (
        RxD        : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        RS232Data  : OUT    std_ulogic_vector (uartDataBitNb-1 DOWNTO 0);
        RS232Valid : OUT    std_ulogic ;
        debug0     : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT SeialSync
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        DataReady   : IN     std_ulogic ;
        LR_I        : IN     std_uLogic ;
        NewData     : IN     std_uLogic ;
        clock       : IN     std_uLogic ;
        highPass    : IN     signed (DATA_WIDTH-1  DOWNTO  0);
        lowPass     : IN     signed (DATA_WIDTH-1  DOWNTO  0);
        reset       : IN     std_uLogic ;
        audioLeft1  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight1 : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT Xover_with_RAM
    GENERIC (
        DATA_WIDTH    : positive;
        FILTER_TAP_NB : positive;
        COEFF_BIT_NB  : positive;
        dataBitNb     : positive;
        addressBitNb  : positive
    );
    PORT (
        DataInCoeffs : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        audio_In     : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock        : IN     std_ulogic ;
        dout1        : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        en           : IN     std_logic ;
        reset        : IN     std_ulogic ;
        DataReady    : OUT    std_ulogic ;
        DebugData    : OUT    unsigned (1 DOWNTO 0);
        din          : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        highPass     : OUT    signed (DATA_WIDTH-1  DOWNTO  0);
        lowPass      : OUT    signed (DATA_WIDTH-1  DOWNTO  0);
        rdaddr       : OUT    std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        re           : OUT    std_ulogic ;
        we           : OUT    std_ulogic ;
        wraddr       : OUT    std_ulogic_vector (addressBitNb-1 DOWNTO 0);
        writeEnA     : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT delayer
    PORT (
        Data         : IN     std_ulogic ;
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        Data_delayed : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT iisDecoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        lr2        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic ;
        LRCK1      : IN     std_uLogic ;
        NewData    : OUT    std_uLogic ;
        Frameout0  : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT muxOut
    PORT (
        CLK_I  : IN     std_uLogic ;
        DOUT   : IN     std_ulogic ;
        Data_I : IN     std_uLogic ;
        LRCK   : IN     std_ulogic ;
        LR_I   : IN     std_uLogic ;
        S20    : IN     std_ulogic ;
        SCK    : IN     std_ulogic ;
        CLK_O  : OUT    std_uLogic ;
        Data_O : OUT    std_uLogic ;
        LR_O   : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT testerRS232
    GENERIC (
        uartDataBitNb : positive
    );
    PORT (
        RS232Data  : IN     std_ulogic_vector (uartDataBitNb -1 DOWNTO 0);
        RS232Valid : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        Debug      : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : CoeffWriter USE ENTITY Splitter.CoeffWriter;
    FOR ALL : RAMmultiplexer USE ENTITY Splitter.RAMmultiplexer;
    FOR ALL : RS232_reciver USE ENTITY Splitter.RS232_reciver;
    FOR ALL : SeialSync USE ENTITY Splitter.SeialSync;
    FOR ALL : Xover_with_RAM USE ENTITY Splitter.Xover_with_RAM;
    FOR ALL : bascule USE ENTITY Splitter_test.bascule;
    FOR ALL : bramDualport USE ENTITY Memory.bramDualport;
    FOR ALL : delayer USE ENTITY Splitter.delayer;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
    FOR ALL : muxOut USE ENTITY Splitter.muxOut;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    FOR ALL : testerRS232 USE ENTITY Splitter.testerRS232;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    testOut(0) <= DebugData(0);
    testOut(1) <= DebugData(1);
    testOut(2) <= RxD_synch;
    testOut(3) <= Debug;
    testOut(4) <= DebugData(0);
    testOut(5) <= DebugData(1);
    testOut(6) <= DebugData(1);


    -- Instance port mappings.
    I3 : bramDualport
        GENERIC MAP (
            addressBitNb => addressBitNb,
            dataBitNb    => dataBitNb,
            initFile     => initFile
        )
        PORT MAP (
            clockA   => clock,
            enA      => we,
            writeEnA => writeEnA,
            addressA => wraddr,
            dataInA  => din,
            dataOutA => dataOutA,
            clockB   => clock,
            enB      => enB1,
            writeEnB => writeEnB1,
            addressB => addressB1,
            dataInB  => dataInB,
            dataOutB => dataOutB
        );
    I10 : CoeffWriter
        GENERIC MAP (
            addressBitNb  => 	addressBitNb,
            dataBitNb     => dataBitNb,
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB,
            DATA_WIDTH    => DATA_WIDTH
        )
        PORT MAP (
            clock    => clock,
            reset    => reset,
            addressB => addressB,
            dataInB  => dataInB,
            enB      => enB,
            writeEnB => writeEnB
        );
    I12 : RAMmultiplexer
        GENERIC MAP (
            addressBitNb => addressBitNb
        )
        PORT MAP (
            addressB  => addressB,
            enB       => enB,
            rdaddr    => rdaddr,
            re        => re,
            writeEnB  => writeEnB,
            addressB1 => addressB1,
            enB1      => enB1,
            writeEnB1 => writeEnB1
        );
    I13 : RS232_reciver
        GENERIC MAP (
            uartDataBitNb  => uartDataBitNb,
            baudRateDivide => integer(clockFrequency/uartBaudRate + 0.5)
        )
        PORT MAP (
            RxD        => RxD_synch,
            clock      => clock,
            reset      => reset,
            RS232Data  => RS232Data,
            RS232Valid => RS232Valid,
            debug0     => debug0
        );
    I4 : SeialSync
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            DataReady   => end_Calc,
            LR_I        => LR_I,
            NewData     => Next_data,
            clock       => clock,
            highPass    => highPass,
            lowPass     => lowPass,
            reset       => reset,
            audioLeft1  => audioLeft1,
            audioRight1 => audioRight1
        );
    I11 : Xover_with_RAM
        GENERIC MAP (
            DATA_WIDTH    => DATA_WIDTH,
            FILTER_TAP_NB => FILTER_TAP_NB,
            COEFF_BIT_NB  => COEFF_BIT_NB,
            dataBitNb     => dataBitNb,
            addressBitNb  => addressBitNb
        )
        PORT MAP (
            DataInCoeffs => dataOutB,
            audio_In     => audio_R_out,
            clock        => clock,
            dout1        => dataOutA,
            en           => en,
            reset        => reset,
            DataReady    => DataReady,
            DebugData    => DebugData,
            din          => din,
            highPass     => highPass,
            lowPass      => lowPass,
            rdaddr       => rdaddr,
            re           => re,
            we           => we,
            wraddr       => wraddr,
            writeEnA     => writeEnA
        );
    I9 : delayer
        PORT MAP (
            Data         => Data,
            clock        => clock,
            reset        => reset,
            Data_delayed => en
        );
    I0 : iisDecoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LR_I,
            SCK        => CLK_I,
            DOUT       => Data_I,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight,
            lr2        => OPEN
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioLeft1,
            audioRight => audioRight1,
            LRCK       => LRCK,
            SCK        => SCK,
            DOUT       => DOUT,
            CLKI2s     => CLK_I,
            LRCK1      => LR_I,
            NewData    => NewData,
            Frameout0  => Frameout0
        );
    I8 : muxOut
        PORT MAP (
            CLK_I  => CLK_I,
            DOUT   => DOUT,
            Data_I => Data_I,
            LRCK   => LRCK,
            LR_I   => LR_I,
            S20    => S20,
            SCK    => SCK,
            CLK_O  => CLK_O,
            Data_O => Data_O,
            LR_O   => LR_O
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => dataValid,
            reset     => reset,
            en        => Data
        );
    I6 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => DataReady,
            reset     => reset,
            en        => end_Calc
        );
    I7 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => NewData,
            reset     => reset,
            en        => Next_data
        );
    I14 : testerRS232
        GENERIC MAP (
            uartDataBitNb => uartDataBitNb
        )
        PORT MAP (
            RS232Data  => RS232Data,
            RS232Valid => RS232Valid,
            clock      => clock,
            reset      => reset,
            Debug      => Debug
        );
    I1 : bascule
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => Data,
            reset       => reset,
            audio_L_out => OPEN,
            audio_R_out => audio_R_out
        );

END visitorsVersion;
