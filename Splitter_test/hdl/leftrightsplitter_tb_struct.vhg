--
-- VHDL Architecture Splitter_test.leftRightSplitter_tb.struct
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 17:42:37 02.08.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
USE gates.gates.all;
LIBRARY Common;
USE Common.CommonLib.all;

LIBRARY Splitter;
LIBRARY Splitter_test;

ARCHITECTURE struct OF leftRightSplitter_tb IS

    -- Architecture declarations
    constant CLOCK_FREQUENCY: real := 66.0E6;
    constant SAMPLING_FREQUENCY: real := 2.0E6;
    constant DATA_WIDTH_T : positive := 24;
    constant COEFF_BIT_NB : positive := 32;
    constant FILTER_TAP_NB : positive := 149;
    constant DATA_IN_WIDTH_T : positive := 32;

    -- Internal signal declarations
    SIGNAL CLKI2s      : std_uLogic;
    SIGNAL CLK_out     : std_uLogic;
    SIGNAL DOUT_in     : std_ulogic;
    SIGNAL Data_out    : std_uLogic;
    SIGNAL LRCK_in     : std_ulogic;
    SIGNAL LRCK_out    : std_ulogic;
    SIGNAL RxD_synch   : std_ulogic;
    SIGNAL SCK_in      : std_ulogic;
    SIGNAL ShiftData   : std_ulogic;
    SIGNAL audioIn     : signed(DATA_WIDTH_T-1 DOWNTO 0);
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL audio_L_out : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL audio_R_out : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL clock       : std_ulogic;
    SIGNAL dataValid   : std_ulogic;
    SIGNAL en          : std_logic;
    SIGNAL reset       : std_ulogic;
    SIGNAL sig0        : std_ulogic;
    SIGNAL sig1        : std_ulogic;
    SIGNAL sig10       : std_ulogic;
    SIGNAL sig11       : std_ulogic;
    SIGNAL sig2        : std_ulogic;
    SIGNAL sig3        : std_ulogic;
    SIGNAL sig4        : std_ulogic;
    SIGNAL sig5        : std_ulogic;
    SIGNAL sig6        : std_ulogic;
    SIGNAL sig7        : std_ulogic;
    SIGNAL sig8        : std_ulogic;
    SIGNAL sig9        : std_ulogic;


    -- Component Declarations
    COMPONENT iisDecoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        lr2        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT leftRightSplitter
    GENERIC (
        signalBitNb  : positive := 24;
        signalOBitNb : positive := 32
    );
    PORT (
        CLK_I     : IN     std_uLogic ;
        Data_I    : IN     std_uLogic ;
        LR_I      : IN     std_uLogic ;
        RxD_synch : IN     std_ulogic ;
        S20       : IN     std_ulogic ;
        S21       : IN     std_ulogic ;
        S22       : IN     std_ulogic ;
        S23       : IN     std_ulogic ;
        clock     : IN     std_ulogic ;
        reset     : IN     std_ulogic ;
        CLK_O     : OUT    std_uLogic ;
        Data_O    : OUT    std_uLogic ;
        LR_O      : OUT    std_ulogic ;
        testOut   : OUT    std_ulogic_vector (6 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT iisEncodeurTester
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        CLKI2s    : IN     std_uLogic ;
        audioInL  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioInR  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        clock     : IN     std_ulogic ;
        reset     : IN     std_ulogic ;
        DOUT_in   : OUT    std_ulogic ;
        LRCK_in   : OUT    std_ulogic ;
        SCK_in    : OUT    std_ulogic ;
        ShiftData : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT lowpass_tester2
    GENERIC (
        CLOCK_FREQUENCY    : real;
        SAMPLING_FREQUENCY : real;
        DATA_WIDTH_T       : positive;
        DATA_IN_WIDTH_T    : positive
    );
    PORT (
        en        : IN     std_logic ;
        CLKI2s    : OUT    std_uLogic ;
        RxD_synch : OUT    std_ulogic ;
        audioIn   : OUT    signed (DATA_WIDTH_T-1 DOWNTO 0);
        clock     : OUT    std_ulogic ;
        reset     : OUT    std_ulogic ;
        sig0      : OUT    std_ulogic ;
        sig1      : OUT    std_ulogic ;
        sig10     : OUT    std_ulogic ;
        sig11     : OUT    std_ulogic ;
        sig2      : OUT    std_ulogic ;
        sig3      : OUT    std_ulogic ;
        sig4      : OUT    std_ulogic ;
        sig5      : OUT    std_ulogic ;
        sig6      : OUT    std_ulogic ;
        sig7      : OUT    std_ulogic ;
        sig8      : OUT    std_ulogic ;
        sig9      : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : bascule USE ENTITY Splitter_test.bascule;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncodeurTester USE ENTITY Splitter_test.iisEncodeurTester;
    FOR ALL : leftRightSplitter USE ENTITY Splitter.leftRightSplitter;
    FOR ALL : lowpass_tester2 USE ENTITY Splitter_test.lowpass_tester2;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I0 : iisDecoder
        GENERIC MAP (
            DATA_WIDTH => DATA_IN_WIDTH_T
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LRCK_out,
            SCK        => CLK_out,
            DOUT       => Data_out,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight,
            lr2        => OPEN
        );
    I_dut : leftRightSplitter
        GENERIC MAP (
            signalBitNb  => 32,
            signalOBitNb => 32
        )
        PORT MAP (
            CLK_I     => SCK_in,
            Data_I    => DOUT_in,
            LR_I      => LRCK_in,
            RxD_synch => RxD_synch,
            S20       => sig0,
            S21       => sig1,
            S22       => sig2,
            S23       => sig3,
            clock     => clock,
            reset     => reset,
            CLK_O     => CLK_out,
            Data_O    => Data_out,
            LR_O      => LRCK_out,
            testOut   => OPEN
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => ShiftData,
            reset     => reset,
            en        => en
        );
    I1 : bascule
        GENERIC MAP (
            DATA_WIDTH => DATA_IN_WIDTH_T
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => dataValid,
            reset       => reset,
            audio_L_out => audio_L_out,
            audio_R_out => audio_R_out
        );
    I2 : iisEncodeurTester
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH_T
        )
        PORT MAP (
            CLKI2s    => CLKI2s,
            audioInL  => audioIn,
            audioInR  => audioIn,
            clock     => clock,
            reset     => reset,
            DOUT_in   => DOUT_in,
            LRCK_in   => LRCK_in,
            SCK_in    => SCK_in,
            ShiftData => ShiftData
        );
    I_tester : lowpass_tester2
        GENERIC MAP (
            CLOCK_FREQUENCY    => CLOCK_FREQUENCY,
            SAMPLING_FREQUENCY => SAMPLING_FREQUENCY,
            DATA_WIDTH_T       => DATA_WIDTH_T,
            DATA_IN_WIDTH_T    => DATA_IN_WIDTH_T
        )
        PORT MAP (
            en        => en,
            CLKI2s    => CLKI2s,
            RxD_synch => RxD_synch,
            audioIn   => audioIn,
            clock     => clock,
            reset     => reset,
            sig0      => sig0,
            sig1      => sig1,
            sig10     => sig10,
            sig11     => sig11,
            sig2      => sig2,
            sig3      => sig3,
            sig4      => sig4,
            sig5      => sig5,
            sig6      => sig6,
            sig7      => sig7,
            sig8      => sig8,
            sig9      => sig9
        );

END struct;
