--
-- VHDL Architecture Splitter_test.leftRightSplitter_tb.struct
--
-- Created:
--          by - maxime.cesalli.UNKNOWN (WE2330804)
--          at - 15:23:00 30.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

LIBRARY Splitter;
LIBRARY Splitter_test;

ARCHITECTURE struct OF leftRightSplitter_tb IS

    -- Architecture declarations
    constant CLOCK_FREQUENCY: real := 66.0E6;
    constant SAMPLING_FREQUENCY: real := 2.0E6;
    constant DATA_WIDTH_T : positive := 24;
    constant COEFF_BIT_NB : positive := 16;
    constant FILTER_TAP_NB : positive := 33;
    constant DATA_IN_WIDTH_T : positive := 32;

    -- Internal signal declarations
    SIGNAL CLKI2s      : std_uLogic;
    SIGNAL CLK_O       : std_uLogic;
    SIGNAL DOUT        : std_ulogic;
    SIGNAL Data_O      : std_uLogic;
    SIGNAL LRCK        : std_ulogic;
    SIGNAL LRCK1       : std_ulogic;
    SIGNAL SCK         : std_ulogic;
    SIGNAL ShiftData   : std_ulogic;
    SIGNAL audioIn     : signed(DATA_WIDTH_T-1 DOWNTO 0);
    SIGNAL audioLeft   : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL audioLeftO  : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL audioRight  : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL audioRightO : signed(DATA_IN_WIDTH_T-1 DOWNTO 0);
    SIGNAL clock       : std_ulogic;
    SIGNAL dataValid   : std_ulogic;
    SIGNAL en          : std_logic;
    SIGNAL reset       : std_ulogic;


    -- Component Declarations
    COMPONENT iisDecoder
    GENERIC (
        DATA_IN_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        LRCK       : IN     std_ulogic ;
        SCK        : IN     std_ulogic ;
        DOUT       : IN     std_ulogic ;
        dataValid  : OUT    std_ulogic ;
        audioLeft  : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0);
        audioRight : OUT    signed (DATA_IN_WIDTH-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT iisEncoder
    GENERIC (
        DATA_WIDTH : positive
    );
    PORT (
        reset      : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        audioLeft  : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        audioRight : IN     signed (DATA_WIDTH-1 DOWNTO 0);
        LRCK       : OUT    std_ulogic ;
        SCK        : OUT    std_ulogic ;
        DOUT       : OUT    std_ulogic ;
        ShiftData  : OUT    std_ulogic ;
        CLKI2s     : IN     std_uLogic 
    );
    END COMPONENT;
    COMPONENT leftRightSplitter
    GENERIC (
        signalBitNb  : positive := 24;
        signalOBitNb : positive := 32
    );
    PORT (
        CLK_I  : IN     std_uLogic ;
        Data_I : IN     std_uLogic ;
        LR_I   : IN     std_uLogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        CLK_O  : OUT    std_uLogic ;
        Data_O : OUT    std_uLogic ;
        LR_O   : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT risingEdgeDetector
    PORT (
        clock     : IN     std_logic ;
        dataValid : IN     std_logic ;
        reset     : IN     std_logic ;
        en        : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT bascule
    GENERIC (
        DATA_IN_WIDTH_T : positive
    );
    PORT (
        audio_L_in  : IN     signed (DATA_IN_WIDTH_T-1 DOWNTO 0);
        audio_R_in  : IN     signed (DATA_IN_WIDTH_T-1 DOWNTO 0);
        clock       : IN     std_ulogic ;
        dataVAlid   : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        audio_L_out : OUT    signed (DATA_IN_WIDTH_T-1 DOWNTO 0);
        audio_R_out : OUT    signed (DATA_IN_WIDTH_T-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT lowpass_tester2
    GENERIC (
        CLOCK_FREQUENCY    : real;
        SAMPLING_FREQUENCY : real;
        DATA_WIDTH         : positive;
        DATA_IN_WIDTH      : positive
    );
    PORT (
        en      : IN     std_logic ;
        CLKI2s  : OUT    std_uLogic ;
        audioIn : OUT    signed (DATA_WIDTH_T-1 DOWNTO 0);
        clock   : OUT    std_ulogic ;
        reset   : OUT    std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : bascule USE ENTITY Splitter_test.bascule;
    FOR ALL : iisDecoder USE ENTITY Splitter.iisDecoder;
    FOR ALL : iisEncoder USE ENTITY Splitter.iisEncoder;
    FOR ALL : leftRightSplitter USE ENTITY Splitter.leftRightSplitter;
    FOR ALL : lowpass_tester2 USE ENTITY Splitter_test.lowpass_tester2;
    FOR ALL : risingEdgeDetector USE ENTITY Splitter.risingEdgeDetector;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I0 : iisDecoder
        GENERIC MAP (
            DATA_IN_WIDTH => DATA_IN_WIDTH_T
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            LRCK       => LRCK1,
            SCK        => CLK_O,
            DOUT       => Data_O,
            dataValid  => dataValid,
            audioLeft  => audioLeft,
            audioRight => audioRight
        );
    I2 : iisEncoder
        GENERIC MAP (
            DATA_WIDTH => DATA_WIDTH_T
        )
        PORT MAP (
            reset      => reset,
            clock      => clock,
            audioLeft  => audioIn,
            audioRight => audioIn,
            LRCK       => LRCK,
            SCK        => SCK,
            DOUT       => DOUT,
            ShiftData  => ShiftData,
            CLKI2s     => CLKI2s
        );
    I_dut : leftRightSplitter
        GENERIC MAP (
            signalBitNb  => 24,
            signalOBitNb => 32
        )
        PORT MAP (
            CLK_I  => SCK,
            Data_I => DOUT,
            LR_I   => LRCK,
            clock  => clock,
            reset  => reset,
            CLK_O  => CLK_O,
            Data_O => Data_O,
            LR_O   => LRCK1
        );
    I5 : risingEdgeDetector
        PORT MAP (
            clock     => clock,
            dataValid => ShiftData,
            reset     => reset,
            en        => en
        );
    I1 : bascule
        GENERIC MAP (
            DATA_IN_WIDTH_T => DATA_IN_WIDTH_T
        )
        PORT MAP (
            audio_L_in  => audioRight,
            audio_R_in  => audioLeft,
            clock       => clock,
            dataVAlid   => dataValid,
            reset       => reset,
            audio_L_out => audioLeftO,
            audio_R_out => audioRightO
        );
    I_tester : lowpass_tester2
        GENERIC MAP (
            CLOCK_FREQUENCY    => CLOCK_FREQUENCY,
            SAMPLING_FREQUENCY => SAMPLING_FREQUENCY,
            DATA_WIDTH         => DATA_WIDTH_T,
            DATA_IN_WIDTH      => DATA_IN_WIDTH_T
        )
        PORT MAP (
            en      => en,
            CLKI2s  => CLKI2s,
            audioIn => audioIn,
            clock   => clock,
            reset   => reset
        );

END struct;
